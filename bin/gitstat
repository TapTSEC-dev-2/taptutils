#!/bin/bash
### script information
# developer:
# tapt
version=1
# ANSI codes
red="\033[31m"
green="\033[32m"
pink="\033[38;5;213m"
newl="\n"
nocolor="\033[0m"
interval="0.02"
# dependency check
depconf() {
    clear
    pwpm "The following steps may require root privelleges, do you consent? (y/n)" "0.025" "$red"
    read conf
    pwpm "It may also require checking your distribution's package manager, do you consent? (y/n)" "0.025" "$red"
    read conftwo
    if [[ "$conf" =~ ^([Yy])$ ]]; then
        depchk
    else
        pwpm "canceling dependency check, failure may occur"
        greeter
    fi
    if [[ "$conftwo" =~ ^([Yy])$ ]]; then
        depchk
    else
        pwpm "canceling dependency check, failure may occur"
        greeter
    fi
}
depchk() {
    if [[ -f /etc/debian_version ]]; then
        pwpm "Debian based operating system detected, using APT"
        pkg="apt"
    elif [[ -f /etc/redhat-release ]]; then
        pwpm "RHEL based operating system detected, using DNF"
        pkg="dnf"
    elif [[ -f /etc/arch-release ]]; then
        pwpm "Arch based operating system detected, using DNF"
        pkg="pacman"
    else
        pwpm "no supported package namager found."
        exit 1
    fi
    case $pkg in
        "apt")
        if git &> /dev/null; then
            pwpm "Installing Git..."
            sudo apt install git
        else
            pwpm "Git is Installed"
        fi
        ;;
        "dnf")
        if git &> /dev/null; then
            pwpm "Installing Git..."
            sudo dnf install git
        else
            pwpm "Git is Installed"
        fi
        ;;
        "pacman")
        if git &> /dev/null; then
            pwpm "Installing Git..."
            sudo pacman -S git
        else
            pwpm "Git is Installed"
        fi
        ;;
        *)
        echo "invalid input. please try again."
    esac
    greeter
}
# last minute thing i made when my internet went out
wifi() {
    if nmcli -t -f ACTIVE,SSID dev wifi | grep -q '^yes'; then
        pwpm "Wi-Fi is connected."
        return 0
    elif nmcli -t -f TYPE,STATE dev | grep -q '^ethernet:connected'; then
        pwpm "Ethernet is connected."
    else
        pwpm "Wi-Fi/Ethernet is not connected."
        return 1
        pwpm "This script requires a stable internet connection, please connect to Wi-Fi or Ethernet and try again"
    fi
}
# badass readout (colorizing isnt supported right now, ill figure that out soon :[ )
pwpm() {
# color is an ANSI escape code, quotations or not, no matter
# refer to https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797 for help with these.
local color="$3"
local text="$1"
local delay="$2"
if [[ "$delay" == "" ]]; then
    delay="0.025"
    color="$2"
    if [[ "$color" == "" ]]; then
        color="\033[0m"
    fi
fi
echo -e "$color"
for (( i=0; i<${#text}; i++)); do
    printf "%s" "${text:i:1}"
    sleep "$delay"
done
echo -e "\n"
}
greeter() {
echo "============================"
pwpm "welcome to gitstat v$version" "0.025" "$green"
echo -e "${nocolor}============================"
sleep 2
read -rp "press enter to continue..."
listrepositories
}
listrepositories() {
local cols=$(tput cols)
local subcols=$((cols - 2))
local char="#"
clear
pwpm "Loading..."
loadbar="[$(printf "%${subcols}s" | tr ' ' "$char")]"
pwpm "$loadbar" "0.05" "$red"
pwpm "Welcome to GitStat!" "0.025" "$nocolor"
pwpm "Credits to Cr0mb for allowing me to take the time to rewrite this in Bash!"
pwpm "To get started, please provide a username!"
read username
url="https://api.github.com/users/$username"
curler=$(curl -s "$url/repos" | jq -r '.[].name' | nl)
echo -e "${pink}||---<repositories>-----------------------------------------------------------||${red}"
check=$(echo "$curler")
if [ -z "$check" ]; then
    pwpm "cURl failed, checking Wi-Fi connection"
    if wifi; then\
        pwpm "cURL failed, however, Wi-Fi or Ethernet are indeed connected..."
        pwpm "This may be a bug, report to taptsec@proton.me"
    else
        pwpm "cURL failed for an unknown reason, please try again..."
        read -rp "press enter to continue..."
        exit 1
    fi
else
    echo "$check"
fi
echo -e "${pink}||----------------------------------------------------------------------------||${nocolor}"
read -rp "press enter to continue..."
menu
}
# this next one was a bit of a pain ngl(edit: no, depchk and depconf were harder for sure)
menu() {
pwpm "Your options are:"
pwpm "1. View a repository"
pwpm "2. Clone a repository"
pwpm "3. Clone multiple repositories(if applicable)"
pwpm "4. Exit"
read num
case $num in
    1)
    pwpm "View a repository"
    viewrepo
    ;;
    2)
    clonerepo
    ;;
    3)
    multiclone
    ;;
    4)
    exit 0
    ;;
    *)
    pwpm "invalid input, please try again..."
    menu
    ;;
esac
}
fetch() {
    local path="$1"
    local indent="$2"
apilink="https://api.github.com/repos/$username/$repo/contents"
    response=$(curl -s "$apilink")
    if [[ "$response" == *"Not Found"* ]]; then
        pwpm "repository '$username/$repo' not found."
        return
    elif [[ "$response" == *"rate limit"* ]]; then
        pwpm "error: rate limit exceeded."
        return
    fi
    echo "$response" | grep -o '"name": *"[^"]*"' | while read -r line; do
        name=$(echo "$line" | sed 's/"name": *//; s/"//g')
        echo "${indent}      |---- $name"
    done
    echo "$response" | grep -o '"type": *"[^"]*"' | while read -r line; do
        type=$(echo "$line" | sed 's/"type": *//; s/"//g')
        if [[ "$type" == "dir" ]]; then
            echo "${indent}|--- $name"
            fetch "$path/$name" "${indent}      |"
        fi
    done
}
viewrepo() {
    pwpm "view which repository?"
    read -s repo
    echo -e "${green}""        ""$username/$repo/"
    fetch "" "        "
    sleep 3
    echo ""
    read -rp "press enter to continue..."
    sleep 2
    menu
}
clonerepo() {
    pwpm "This will require using the package Git, if you dont have it installed, kill the script(CTRL+C) and use your package manager to install it if the dependency checker was skipped or failed."
    read -rp "press enter to continue..."
    clear
    echo -e "${pink}||---<repositories>-----------------------------------------------------------||${red}"
    echo "$curler"
    echo -e "${pink}||----------------------------------------------------------------------------||${nocolor}"
    pwpm "clone which repository from above?"
    read repo
    if echo "$curler" | grep $repo &> /dev/null; then
        pwpm "repository found! executing git clone $repo"
        git clone https://github.com/$username/$repo || exit 1
        menu
    else
        pwpm "repository named was invalid, please try again"
        exit 1
    fi
    pwpm "git clone successful!"
    menu
}
multiclone() {
    pwpm "This will require using the package Git, if you dont have it installed, kill the script and use your package manager to install it if the dependency checker was skipped or failed."
    read -rp "press enter to continue..."
    clear
    echo -e "${pink}||---<repositories>-----------------------------------------------------------||${red}"
    echo "$curler"
    echo -e "${pink}||----------------------------------------------------------------------------||${nocolor}"
    while true; do
        pwpm "clone which repository from above? (or type exit to exit)"
	read repo
        if [[ "$repo" == "exit" ]]; then
            pwpm "exiting..."
            break
        fi
        if echo "$curler" | grep $repo &> /dev/null; then
            pwpm "repository found! executing git clone $rptcl"
            git clone https://github.com/$username/$repo || exit 1
        else
            pwpm "repository named was invalid, please try again"
            exit 1
        fi
        pwpm "git clone successful!"
        read -rp  "press enter to continue..."
        clear
    done
    menu
}
depconf
