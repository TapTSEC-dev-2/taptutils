#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root or with root privelleges."
  exit 1
fi
if [ -z "$1" ]; then
  echo "Usage: sudo apt-scrape <package>"
  exit 1
fi
PACKAGE_NAME=$1
DEB_NAME="${PACKAGE_NAME}.deb"
TMP_DIR="/tmp/${PACKAGE_NAME}"
CONTROL_DIR="${TMP_DIR}/DEBIAN"
mkdir -p ${TMP_DIR}
mkdir /tmp/${PACKAGE_NAME}/temporary /outputs /tmp/${PACKAGE_NAME}/libraries /tmp/${PACKAGE_NAME}/libraries.d
apt-get -y --download-only --no-install-recommends install ${PACKAGE_NAME} --ignore-missing
if [ $? -ne 0 ]; then
  echo "Failed to install ${PACKAGE_NAME}. Exiting."
  exit 1
fi
# Retrieve the list of files downloaded by the package
PACKAGE_FILES=$(apt-get -y --print-uris install ${PACKAGE_NAME} | grep '^\' | cut -d\' -f2)
# Move all files from the APT archives
	mv /var/cache/apt/archives/* /tmp/${PACKAGE_NAME}/temporary
		cd /tmp/${PACKAGE_NAME}/
	dirs=(
    bin
    sbin
    lib
    lib32
    lib64
    libx32
    usr/bin
    usr/sbin
    usr/lib
    usr/local/bin
    usr/local/sbin
    usr/local/lib
    usr/share
    usr/share/doc
    usr/share/man
    usr/share/info
    usr/share/applications
    usr/share/icons
    usr/share/mime
    var/cache
    var/lib
    var/log
    var/run
    var/spool
    var/tmp
    etc
    etc/default
    etc/init.d
    etc/systemd/system
    opt
    srv
    media
    mnt
)
# Create the directories
for dir in "${dirs[@]}"; do
    mkdir -p "$dir"
done
cd libraries
for dir in "${dirs[@]}"; do
    mkdir -p "$dir"
done
cd ../temporary
	for deb in /tmp/${PACKAGE_NAME}/temporary/*.deb; do
    # Check if there are no .deb files
    if [ "$deb" == "*.deb" ]; then
        echo "No .deb files found in the directory."
        exit 1
    fi
    cd ../libraries/libraries.d
    if [ "$libraries" == "*.deb" ]; th0en
        echo "no libraries found, removing directories..."
        cd ../../
        rm -rf ./libraries
    fi
    cd temporary
    # Extract the .deb file into the created directory
    cp *lib* ../libraries/libraries.d
    rm ./*lib*
    cd ../libraries/*.d
    dpkg-deb -x "$libraries" "/tmp/${PACKAGE_NAME}/libraries"
    echo "Extracted $libraries into ../libraries"
    cd ../../temporary
    dpkg-deb -x "$deb" "/tmp/${PACKAGE_NAME}/"
    echo "Extracted $deb into ${PACKAGE_NAME}"
done
# Create the DEBIAN directory and control file
mkdir -p ${CONTROL_DIR} /${TMP_DIR}/libraries/DEBIAN
touch ${CONTROL_DIR}/control /${TMP_DIR}/DEBIAN/control
# Prompt for user input for the control file
echo "Creating control file for ${PACKAGE_NAME}. Please provide the following information:"
read -p "Version (e.g., 1.0): " VERSION
read -p "Section (e.g., custom): " SECTION
read -p "Priority (e.g., optional): " PRIORITY
read -p "Architecture (e.g., $(dpkg --print-architecture)): " ARCHITECTURE
read -p "Maintainer (e.g., Your Name <your.email@example.com>): " MAINTAINER
read -p "Description (e.g., Custom package containing ${PACKAGE_NAME} and its dependencies): " DESCRIPTION
# Populate the control file
cat <<EOF >${CONTROL_DIR}/control
Package: ${PACKAGE_NAME}
Version: ${VERSION}
Section: ${SECTION}
Priority: ${PRIORITY}
Architecture: ${ARCHITECTURE}
Maintainer: ${MAINTAINER}
Description: ${DESCRIPTION}
EOF
echo "Creating control file for ${PACKAGE_NAME} libraries."
read -p "Version (e.g., 1.0): " VERSION
read -p "Section (e.g., custom): " SECTION
read -p "Priority (e.g., optional): " PRIORITY
read -p "Architecture (e.g., $(dpkg --print-architecture)" ARCHITECTURE
read -p "Maintainer (e.g., Your Name <your.email@example.com>):" MAINTAINER
DESCRIPTION="Libraries for ${PACKAGE_NAME}"
# Populate the control file
cat <<EOF >${TMP_DIR}/libraries/DEBIAN/control
Package: ${PACKAGE_NAME}
Version: ${VERSION}
Section: ${SECTION}
Priority: ${PRIORITY}
Architecture: ${ARCHITECTURE}
Maintainer: ${MAINTAINER}
Description: ${DESCRIPTION}
EOF
# Build the .deb package
rm ${TMP_DIR}
cd /tmp || exit
dpkg-deb --build ${PACKAGE_NAME} /outputs
dpkg-deb --build ${TMP_DIR}/libraries /outputs
echo "${DEB_NAME} created successfully and moved to /outputs."
# Clean up the temporary directory
rm -rf ${TMP_DIR}

